/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.joachimsohn.cds.grammars;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static de.joachimsohn.cds.psi.CDSTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>CDSLexer.flex</tt>
 */
public class _CDSLexer implements FlexLexer {

  /**
   * This character denotes the end of file
   */
  public static final int YYEOF = -1;
  /**
   * lexical states
   */
  public static final int YYINITIAL = 0;
  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
          "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15" +
                  "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1" +
                  "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43" +
                  "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1" +
                  "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277" +
                  "\12");
  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
          "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34" +
                  "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13" +
                  "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31" +
                  "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\3\13\1\40\2\13\1\41" +
                  "\1\1\1\13\1\42\4\1\1\13\1\43\1\1\1\44\1\22\7\13\1\45\1\24\1\34\1\46\1\35\1" +
                  "\47\1\50\1\51\1\45\1\16\1\52\1\46\1\35\1\53\1\54\1\55\1\56\1\57\1\60\1\22" +
                  "\1\35\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\35\1\61\1\66\1\67\1\45\1\70\1\71" +
                  "\1\72\1\73\1\33\1\74\1\75\1\56\1\1\1\76\1\77\1\35\1\100\1\101\1\102\1\45\1" +
                  "\1\1\76\1\77\1\35\1\103\1\101\1\104\1\45\1\105\1\106\1\77\1\13\1\37\1\107" +
                  "\1\110\1\45\1\111\1\112\1\113\1\13\1\114\1\115\1\116\1\56\1\117\1\24\2\13" +
                  "\1\31\1\120\1\121\2\1\1\122\1\123\1\124\1\125\1\126\1\127\2\1\1\63\1\130\1" +
                  "\121\1\131\1\132\1\13\1\133\1\24\1\134\1\132\1\13\1\133\1\135\3\1\4\13\1\121" +
                  "\4\13\1\41\2\13\1\136\2\13\1\137\24\13\1\140\1\141\2\13\1\140\2\13\1\142\1" +
                  "\143\1\14\3\13\1\143\3\13\1\37\2\1\1\13\1\1\5\13\1\144\1\24\45\13\1\36\1\13" +
                  "\1\145\1\31\4\13\1\146\1\147\1\150\1\151\1\13\1\151\1\13\1\152\1\150\1\153" +
                  "\5\13\1\154\1\121\1\1\1\155\1\121\5\13\1\26\2\13\1\31\4\13\1\57\1\13\1\120" +
                  "\2\42\1\56\1\13\1\41\1\151\2\13\1\42\1\13\2\121\2\1\1\13\1\42\3\13\1\120\1" +
                  "\13\1\36\2\121\1\156\1\120\4\1\4\13\1\42\1\121\1\157\1\152\7\13\1\152\3\13" +
                  "\1\26\1\100\2\13\1\41\1\147\4\1\1\160\1\13\1\161\17\13\1\162\21\13\1\144\2" +
                  "\13\1\144\1\163\1\13\1\41\3\13\1\164\1\165\1\166\1\133\1\165\1\167\1\1\1\170" +
                  "\1\171\1\63\1\172\1\1\1\173\1\1\1\133\3\1\2\13\1\63\1\174\1\175\1\176\1\127" +
                  "\1\177\1\1\2\13\1\147\62\1\1\56\2\13\1\121\161\1\2\13\1\120\2\13\1\120\10" +
                  "\13\1\200\1\152\2\13\1\136\3\13\1\201\1\171\1\13\1\202\4\203\2\13\2\1\1\171" +
                  "\35\1\1\204\1\1\1\24\1\205\1\24\4\13\1\206\1\24\4\13\1\137\1\207\1\13\1\41" +
                  "\1\24\4\13\1\120\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1\57\4\1\135\13\1\57\2" +
                  "\1\10\13\1\133\4\1\2\13\1\41\20\13\1\133\1\13\1\42\1\1\3\13\1\210\7\13\1\16" +
                  "\1\1\1\211\1\212\5\13\1\213\1\13\1\120\1\26\3\1\1\211\2\13\1\26\1\1\3\13\1" +
                  "\152\4\13\1\57\1\121\1\13\1\214\2\13\1\41\2\13\1\152\1\13\1\133\4\13\1\215" +
                  "\1\121\1\13\1\120\3\13\1\202\1\41\1\121\1\13\1\113\4\13\1\32\1\155\1\13\1" +
                  "\216\1\217\1\220\1\203\2\13\1\137\1\57\7\13\1\221\1\121\72\13\1\152\1\13\1" +
                  "\222\2\13\1\42\20\1\26\13\1\41\6\13\1\121\2\1\1\202\1\223\1\35\1\224\1\225" +
                  "\6\13\1\16\1\1\1\226\25\13\1\41\1\1\4\13\1\212\2\13\1\26\2\1\1\42\1\13\1\1" +
                  "\1\13\1\227\1\230\2\1\1\134\7\13\1\133\1\1\1\121\1\24\1\231\1\24\1\31\1\56" +
                  "\4\13\1\120\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\41\2\1\7\13\1\31\4\1\3" +
                  "\13\1\151\7\1\1\236\10\1\1\13\1\133\3\13\2\63\1\1\2\13\1\1\1\13\1\31\2\13" +
                  "\1\31\1\13\1\41\2\13\1\237\1\240\2\1\11\13\1\41\1\121\2\13\1\237\1\13\1\42" +
                  "\2\13\1\26\3\13\1\152\11\1\23\13\1\202\1\13\1\57\1\26\11\1\1\241\2\13\1\242" +
                  "\1\13\1\57\1\13\1\202\1\13\1\120\4\1\1\13\1\243\1\13\1\57\1\13\1\121\4\1\3" +
                  "\13\1\244\4\1\1\245\1\246\1\13\1\247\2\1\1\13\1\133\1\13\1\133\2\1\1\132\1" +
                  "\13\1\202\1\1\3\13\1\57\1\13\1\57\1\13\1\32\1\13\1\16\6\1\4\13\1\147\3\1\3" +
                  "\13\1\32\3\13\1\32\60\1\4\13\1\202\1\1\1\56\1\171\3\13\1\31\1\1\1\13\1\147" +
                  "\1\121\3\13\1\134\1\1\2\13\1\250\4\13\1\251\1\252\2\1\1\13\1\22\1\13\1\253" +
                  "\4\1\1\254\1\27\1\147\3\13\1\31\1\121\1\34\1\46\1\35\1\61\1\66\1\255\1\256" +
                  "\1\151\10\1\4\13\1\31\1\121\2\1\4\13\1\257\1\121\12\1\3\13\1\260\1\63\1\261" +
                  "\2\1\4\13\1\262\1\121\2\1\3\13\1\26\1\121\3\1\1\13\1\100\1\42\1\121\26\1\4" +
                  "\13\1\121\1\171\34\1\3\13\1\147\20\1\1\35\2\13\1\14\1\63\1\121\1\1\1\212\1" +
                  "\13\1\212\1\132\1\202\64\1\71\13\1\121\6\1\6\13\1\120\1\1\14\13\1\152\53\1" +
                  "\2\13\1\120\75\1\44\13\1\202\33\1\43\13\1\147\1\13\1\120\1\121\6\1\1\13\1" +
                  "\41\1\151\3\13\1\202\1\152\1\121\1\226\1\263\1\13\67\1\4\13\1\151\2\13\1\120" +
                  "\1\171\1\13\4\1\1\63\1\1\76\13\1\133\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1" +
                  "\31\1\133\1\147\1\264\114\1\1\265\1\266\1\267\1\1\1\270\11\1\1\271\33\1\5" +
                  "\13\1\134\3\13\1\150\1\272\1\273\1\274\3\13\1\275\1\276\1\13\1\277\1\300\1" +
                  "\77\24\13\1\260\1\13\1\77\1\137\1\13\1\137\1\13\1\134\1\13\1\134\1\120\1\13" +
                  "\1\120\1\13\1\35\1\13\1\35\1\13\1\301\3\13\40\1\3\13\1\222\2\13\1\133\1\302" +
                  "\1\303\1\157\1\24\25\1\1\14\1\213\1\304\75\1\14\13\1\151\1\202\2\1\4\13\1" +
                  "\31\1\121\112\1\1\274\1\13\1\305\1\306\1\307\1\310\1\311\1\312\1\313\1\42" +
                  "\1\314\1\42\47\1\1\13\1\121\1\13\1\121\1\13\1\121\47\1\55\13\1\202\2\1\103" +
                  "\13\1\151\15\13\1\41\150\13\1\16\25\1\41\13\1\41\56\1\17\13\41\1");
  /* The ZZ_CMAP_A table has 3280 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
          "\11\0\1\2\4\1\22\0\1\55\1\0\1\40\1\0\1\32\2\0\1\5\1\25\1\30\1\4\1\0\1\37\1" +
                  "\43\1\10\1\3\12\7\1\36\1\35\1\0\1\41\2\0\1\33\1\57\1\11\1\60\1\72\1\74\5\11" +
                  "\1\66\1\76\1\11\1\65\1\11\1\71\1\11\1\75\1\11\1\73\1\70\1\11\1\67\3\11\1\26" +
                  "\1\34\1\27\1\0\1\42\1\0\1\17\1\11\1\45\1\51\1\15\1\16\1\47\1\63\1\46\1\61" +
                  "\1\54\1\20\1\23\1\22\1\50\1\44\1\56\1\13\1\21\1\12\1\14\1\53\1\64\1\62\1\52" +
                  "\1\11\1\24\1\0\1\31\7\0\1\1\12\0\1\2\11\0\1\6\12\0\1\6\4\0\1\6\5\0\27\6\1" +
                  "\0\12\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2\6\2\0\4\6\1\0\1\6" +
                  "\6\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\23\6\1\0\11\6\1\0\26\6\2\0\1\6\6\0\10" +
                  "\6\10\0\16\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\10\0\13\6\5\0\3\6\15\0\12\6\4" +
                  "\0\6\6\1\0\10\6\2\0\12\6\1\0\23\6\2\0\14\6\2\0\11\6\4\0\1\6\5\0\16\6\2\0\14" +
                  "\6\4\0\5\6\1\0\10\6\6\0\20\6\2\0\13\6\2\0\16\6\1\0\1\6\3\0\4\6\2\0\11\6\2" +
                  "\0\2\6\2\0\4\6\10\0\1\6\4\0\2\6\1\0\1\6\1\0\3\6\1\0\6\6\4\0\2\6\1\0\2\6\1" +
                  "\0\2\6\1\0\2\6\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\3\0\1\6\7\0\4\6\1\0\1\6\7\0" +
                  "\20\6\13\0\3\6\1\0\11\6\1\0\2\6\1\0\2\6\1\0\5\6\2\0\12\6\1\0\3\6\1\0\3\6\2" +
                  "\0\1\6\30\0\1\6\7\0\3\6\1\0\10\6\2\0\6\6\2\0\2\6\2\0\3\6\10\0\2\6\4\0\2\6" +
                  "\1\0\1\6\1\0\1\6\20\0\2\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6" +
                  "\3\0\2\6\3\0\3\6\3\0\5\6\3\0\3\6\1\0\4\6\2\0\1\6\6\0\1\6\10\0\4\6\1\0\10\6" +
                  "\1\0\3\6\1\0\30\6\3\0\10\6\1\0\3\6\1\0\4\6\7\0\2\6\1\0\3\6\5\0\4\6\1\0\5\6" +
                  "\2\0\4\6\5\0\2\6\7\0\1\6\2\0\2\6\16\0\3\6\1\0\10\6\1\0\7\6\1\0\3\6\1\0\5\6" +
                  "\5\0\4\6\7\0\1\6\12\0\6\6\2\0\2\6\1\0\22\6\3\0\10\6\1\0\11\6\1\0\1\6\2\0\7" +
                  "\6\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\2\0\2\6\14\0\17\6\1\0\12\6\7\0\2\6\1\0" +
                  "\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2" +
                  "\6\1\0\15\6\1\0\3\6\2\0\5\6\1\0\1\6\1\0\6\6\2\0\12\6\2\0\4\6\10\0\2\6\13\0" +
                  "\1\6\1\0\1\6\1\0\1\6\4\0\12\6\1\0\24\6\3\0\5\6\1\0\12\6\6\0\1\6\11\0\6\6\1" +
                  "\0\1\6\5\0\1\6\2\0\13\6\1\0\15\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\1\6\1" +
                  "\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\16\6\2\0\6\6\2\0\1\2\32\6\3\0\13\6\7\0" +
                  "\15\6\1\0\7\6\13\0\4\6\14\0\1\6\1\0\2\6\14\0\4\6\3\0\1\6\4\0\2\6\15\0\3\6" +
                  "\11\0\1\6\23\0\10\6\1\0\23\6\1\0\2\6\6\0\6\6\5\0\15\6\1\0\1\6\1\0\1\6\1\0" +
                  "\1\6\1\0\6\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\13\2\15\0" +
                  "\2\1\5\0\1\2\17\0\1\6\4\0\1\6\12\0\1\2\1\0\1\6\15\0\1\6\2\0\1\6\4\0\1\6\2" +
                  "\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6\5\0\5\6\4" +
                  "\0\1\6\1\0\5\6\6\0\15\6\7\0\10\6\11\0\7\6\1\0\7\6\1\0\1\2\4\0\3\6\11\0\5\6" +
                  "\2\0\5\6\3\0\7\6\2\0\2\6\2\0\3\6\5\0\16\6\1\0\12\6\1\0\1\6\7\0\11\6\2\0\27" +
                  "\6\2\0\15\6\3\0\1\6\1\0\1\6\2\0\1\6\16\0\1\6\2\0\5\6\12\0\6\6\2\0\6\6\2\0" +
                  "\6\6\11\0\13\6\1\0\2\6\2\0\7\6\4\0\5\6\3\0\5\6\5\0\12\6\1\0\5\6\1\0\1\6\1" +
                  "\0\2\6\1\0\2\6\1\0\12\6\3\0\15\6\3\0\2\6\30\0\16\6\4\0\1\6\2\0\6\6\2\0\6\6" +
                  "\2\0\6\6\2\0\3\6\3\0\14\6\1\0\16\6\1\0\2\6\1\0\1\6\15\0\1\6\2\0\4\6\4\0\10" +
                  "\6\1\0\5\6\12\0\6\6\2\0\1\6\1\0\14\6\1\0\2\6\3\0\1\6\2\0\4\6\1\0\2\6\12\0" +
                  "\10\6\6\0\6\6\1\0\2\6\5\0\10\6\1\0\3\6\1\0\13\6\4\0\3\6\4\0\5\6\2\0\1\6\11" +
                  "\0\5\6\5\0\3\6\3\0\13\6\1\0\1\6\3\0\10\6\6\0\1\6\1\0\7\6\1\0\1\6\1\0\4\6\1" +
                  "\0\2\6\6\0\1\6\5\0\7\6\2\0\7\6\3\0\6\6\1\0\1\6\10\0\6\6\2\0\10\6\10\0\6\6" +
                  "\2\0\1\6\3\0\1\6\13\0\10\6\5\0\15\6\3\0\2\6\6\0\5\6\3\0\6\6\10\0\10\6\2\0" +
                  "\7\6\16\0\4\6\4\0\3\6\15\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1" +
                  "\0\21\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\14\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0\11\6" +
                  "\1\0\10\6\2\0\2\6\5\0\1\6\16\0\1\6\13\0\2\6\1\0\2\6\1\0\5\6\6\0\2\6\1\0\1" +
                  "\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1" +
                  "\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6" +
                  "\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0\5\6\1\0\3\6" +
                  "\1\0\5\6\1\0\5\6");
  /**
   * initial size of the lookahead buffer
   */
  private static final int ZZ_BUFFERSIZE = 16384;
  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0, 0
  };
  private static final String ZZ_ACTION_PACKED_0 =
          "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\13\7" +
                  "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17" +
                  "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27" +
                  "\16\7\3\0\1\5\1\30\1\7\1\31\16\7\1\32" +
                  "\14\7\1\33\1\7\1\34\12\7\1\35\1\0\1\36" +
                  "\27\7\1\37\7\7\1\40\11\7\1\41\10\7\1\42" +
                  "\1\43\1\44\6\7\1\45\4\7\1\46\2\7\1\47" +
                  "\7\7\1\50\2\7\1\51\1\7\1\0\1\7\1\52" +
                  "\1\7\1\0\11\7\1\53\4\7\1\54\1\0\4\7" +
                  "\1\55\1\56\1\57\6\7\1\60\10\7\1\0\2\7" +
                  "\1\0\2\7\1\61\1\62\1\63\4\7\1\64\3\7" +
                  "\1\0\4\7\1\65\1\66\1\67\1\7\1\70\1\7" +
                  "\1\71\1\0\1\72\1\73\1\74\1\7\1\75\1\7" +
                  "\1\0\2\7\1\76\1\7\1\77\1\7\1\100\3\7" +
                  "\1\101\1\102\1\103\1\104\5\7\1\0\1\105\1\106" +
                  "\1\7\1\0\1\107\2\7\1\110\3\7\1\111\1\112" +
                  "\1\113\1\7\1\114\1\115\1\7\1\116\5\7\1\117" +
                  "\1\120\1\7\1\121\2\7\1\122\1\123\4\7\4\0" +
                  "\1\124\1\125";
  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();
  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9" +
                  "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1" +
                  "\0\u03f0\0\u042f\0\77\0\77\0\77\0\77\0\77\0\77" +
                  "\0\77\0\77\0\77\0\77\0\77\0\77\0\77\0\77" +
                  "\0\u01b9\0\77\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9" +
                  "\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1" +
                  "\0\u07e0\0\u081f\0\u085e\0\u089d\0\77\0\u08dc\0\u01b9\0\u091b" +
                  "\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13" +
                  "\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b" +
                  "\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03" +
                  "\0\u0f42\0\u0f81\0\u01b9\0\u0fc0\0\u01b9\0\u0fff\0\u103e\0\u107d" +
                  "\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u07e0" +
                  "\0\u1275\0\77\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef" +
                  "\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7" +
                  "\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df" +
                  "\0\u181e\0\u01b9\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998" +
                  "\0\u19d7\0\u01b9\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51" +
                  "\0\u1b90\0\u1bcf\0\u1c0e\0\u01b9\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a" +
                  "\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u081f\0\u01b9\0\u1e45\0\u1e84" +
                  "\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u01b9\0\u1ffe\0\u203d" +
                  "\0\u207c\0\u20bb\0\u01b9\0\u20fa\0\u2139\0\u01b9\0\u2178\0\u21b7" +
                  "\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u01b9\0\u2331\0\u2370" +
                  "\0\u01b9\0\u23af\0\u23ee\0\u242d\0\u01b9\0\u246c\0\u24ab\0\u24ea" +
                  "\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2" +
                  "\0\u01b9\0\u2721\0\u2760\0\u279f\0\u27de\0\u01b9\0\u281d\0\u285c" +
                  "\0\u289b\0\u28da\0\u2919\0\u01b9\0\u01b9\0\u01b9\0\u2958\0\u2997" +
                  "\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u01b9\0\u2ad2\0\u2b11\0\u2b50" +
                  "\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48" +
                  "\0\u2d87\0\u2dc6\0\u2e05\0\u01b9\0\u01b9\0\u01b9\0\u2e44\0\u2e83" +
                  "\0\u2ec2\0\u2f01\0\u01b9\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c" +
                  "\0\u307b\0\u30ba\0\u30f9\0\u01b9\0\u01b9\0\u01b9\0\u3138\0\u01b9" +
                  "\0\u3177\0\u01b9\0\u31b6\0\u01b9\0\u01b9\0\u31f5\0\u3234\0\u01b9" +
                  "\0\u3273\0\u32b2\0\u32f1\0\u3330\0\77\0\u336f\0\u01b9\0\u33ae" +
                  "\0\u01b9\0\u33ed\0\u342c\0\u346b\0\u01b9\0\u01b9\0\77\0\u01b9" +
                  "\0\u34aa\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u01b9\0\u01b9" +
                  "\0\u3624\0\u3663\0\u01b9\0\u36a2\0\u36e1\0\u01b9\0\u3720\0\u375f" +
                  "\0\u379e\0\u01b9\0\u01b9\0\u01b9\0\u37dd\0\u01b9\0\77\0\u381c" +
                  "\0\77\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957\0\u01b9\0\u01b9" +
                  "\0\u3996\0\u01b9\0\u39d5\0\u3a14\0\u01b9\0\u01b9\0\u3a53\0\u3a92" +
                  "\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\77\0\77";
  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
  private static final String ZZ_TRANS_PACKED_0 =
          "\1\2\2\3\1\4\1\2\1\5\1\2\1\6\1\7" +
                  "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17" +
                  "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27" +
                  "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37" +
                  "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47" +
                  "\1\50\2\10\1\51\1\3\1\10\1\52\1\53\1\54" +
                  "\2\10\1\55\1\10\1\56\3\10\1\57\2\10\1\60" +
                  "\1\10\100\0\2\3\52\0\1\3\24\0\1\61\1\62" +
                  "\75\0\1\63\2\0\16\63\7\0\1\63\6\0\1\63" +
                  "\1\0\11\63\1\0\21\63\7\0\1\6\1\64\13\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\10\0\1\65" +
                  "\75\0\1\10\1\0\13\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\2\10\1\66\10\10" +
                  "\16\0\1\10\1\0\4\10\1\67\1\10\1\70\2\10" +
                  "\1\0\21\10\7\0\1\10\1\0\4\10\1\71\1\10" +
                  "\1\72\4\10\16\0\1\10\1\0\2\10\1\73\6\10" +
                  "\1\0\21\10\7\0\1\10\1\0\10\10\1\74\1\75" +
                  "\1\10\16\0\1\10\1\0\1\76\10\10\1\0\21\10" +
                  "\7\0\1\10\1\0\11\10\1\77\1\10\16\0\1\10" +
                  "\1\0\11\10\1\0\4\10\1\100\14\10\7\0\1\10" +
                  "\1\0\2\10\1\101\1\102\2\10\1\103\4\10\16\0" +
                  "\1\10\1\0\4\10\1\104\4\10\1\0\21\10\7\0" +
                  "\1\10\1\0\2\10\1\105\5\10\1\106\1\107\1\10" +
                  "\16\0\1\10\1\0\1\10\1\110\7\10\1\0\21\10" +
                  "\7\0\1\10\1\0\4\10\1\111\6\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\4\10" +
                  "\1\112\6\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\3\10\1\113\2\10\1\114\4\10" +
                  "\16\0\1\10\1\0\4\10\1\115\4\10\1\0\21\10" +
                  "\7\0\1\10\1\0\6\10\1\116\4\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\2\10" +
                  "\1\117\10\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\13\10\16\0\1\10\1\0\5\10" +
                  "\1\120\3\10\1\0\21\10\7\0\1\10\1\0\11\10" +
                  "\1\121\1\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\2\10\1\122\10\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\2\10" +
                  "\1\123\1\124\5\10\1\125\1\10\16\0\1\10\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\4\10\1\126" +
                  "\6\10\16\0\1\10\1\0\11\10\1\0\21\10\7\0" +
                  "\1\10\1\0\4\10\1\127\6\10\16\0\1\10\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\10\10\1\130" +
                  "\2\10\16\0\1\10\1\0\11\10\1\0\21\10\7\0" +
                  "\1\10\1\0\13\10\16\0\1\10\1\0\4\10\1\131" +
                  "\4\10\1\0\21\10\7\0\1\10\1\0\13\10\16\0" +
                  "\1\10\1\0\4\10\1\132\4\10\1\0\21\10\7\0" +
                  "\1\10\1\0\13\10\16\0\1\10\1\0\11\10\1\0" +
                  "\5\10\1\133\13\10\7\0\1\10\1\0\13\10\16\0" +
                  "\1\10\1\0\11\10\1\0\11\10\1\134\7\10\7\0" +
                  "\1\10\1\0\13\10\16\0\1\10\1\0\11\10\1\0" +
                  "\16\10\1\135\2\10\7\0\1\10\1\0\13\10\16\0" +
                  "\1\136\1\0\11\10\1\0\16\10\1\137\2\10\1\140" +
                  "\1\0\75\140\1\62\1\0\2\62\1\141\72\62\3\0" +
                  "\1\63\1\0\1\142\16\63\7\0\1\63\6\0\1\63" +
                  "\1\0\11\63\1\0\21\63\7\0\1\64\76\0\1\10" +
                  "\1\0\3\10\1\143\7\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\1\144\10\10\1\0\21\10\7\0\1\10\1\0" +
                  "\1\10\1\145\4\10\1\146\1\10\1\147\2\10\16\0" +
                  "\1\10\1\0\11\10\1\0\1\150\20\10\7\0\1\10" +
                  "\1\0\11\10\1\151\1\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\3\10\1\152\5\10\1\0\21\10\7\0\1\10" +
                  "\1\0\4\10\1\153\6\10\16\0\1\10\1\0\2\10" +
                  "\1\154\6\10\1\0\21\10\7\0\1\10\1\0\13\10" +
                  "\16\0\1\10\1\0\2\10\1\155\6\10\1\0\21\10" +
                  "\7\0\1\10\1\0\13\10\16\0\1\10\1\0\5\10" +
                  "\1\156\3\10\1\0\21\10\7\0\1\10\1\0\1\10" +
                  "\1\157\1\10\1\160\7\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\1\10\1\161\1\162\6\10\1\0\21\10\7\0" +
                  "\1\10\1\0\13\10\16\0\1\10\1\0\4\10\1\163" +
                  "\4\10\1\0\21\10\7\0\1\10\1\0\11\10\1\164" +
                  "\1\10\16\0\1\10\1\0\11\10\1\0\21\10\7\0" +
                  "\1\10\1\0\7\10\1\165\3\10\16\0\1\10\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\2\10\1\166" +
                  "\10\10\16\0\1\10\1\0\11\10\1\0\21\10\7\0" +
                  "\1\10\1\0\2\10\1\167\10\10\16\0\1\10\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\10\10\1\170" +
                  "\2\10\16\0\1\10\1\0\1\171\10\10\1\0\21\10" +
                  "\7\0\1\10\1\0\13\10\16\0\1\10\1\0\5\10" +
                  "\1\172\3\10\1\0\21\10\7\0\1\10\1\0\1\10" +
                  "\1\173\11\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\5\10\1\174\5\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\2\10" +
                  "\1\175\4\10\1\176\3\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\7\10\1\177\3\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\12\10\1\200\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\1\10\1\201\11\10\16\0" +
                  "\1\10\1\0\11\10\1\0\6\10\1\202\12\10\7\0" +
                  "\1\10\1\0\11\10\1\203\1\10\16\0\1\10\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\13\10\16\0" +
                  "\1\10\1\0\4\10\1\204\4\10\1\0\21\10\7\0" +
                  "\1\10\1\0\10\10\1\205\2\10\16\0\1\10\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\1\10\1\206" +
                  "\6\10\1\207\1\210\1\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\6\10\1\211\4\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\1\10\1\212\11\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\5\10\1\213\5\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\13\10\16\0\1\10\1\0\6\10\1\214\2\10" +
                  "\1\0\21\10\7\0\1\10\1\0\10\10\1\215\2\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\12\10\1\216\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\13\10\16\0\1\10\1\0" +
                  "\2\10\1\217\6\10\1\0\21\10\7\0\1\10\1\0" +
                  "\4\10\1\220\6\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\13\10\16\0\1\221\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\13\10\16\0" +
                  "\1\10\1\0\11\10\1\0\20\10\1\222\7\0\1\10" +
                  "\1\0\13\10\16\0\1\10\1\0\11\10\1\0\14\10" +
                  "\1\223\4\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\11\10\1\0\1\10\1\224\17\10\1\62\1\0" +
                  "\1\62\1\225\1\141\72\62\7\0\1\10\1\0\4\10" +
                  "\1\226\6\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\4\10\1\227\6\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\3\10" +
                  "\1\230\7\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\13\10\16\0\1\10\1\0\5\10" +
                  "\1\231\3\10\1\0\21\10\7\0\1\10\1\0\1\10" +
                  "\1\232\11\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\3\10\1\233\7\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\13\10" +
                  "\16\0\1\10\1\0\3\10\1\234\5\10\1\0\21\10" +
                  "\7\0\1\10\1\0\13\10\16\0\1\10\1\0\11\10" +
                  "\1\0\5\10\1\235\13\10\7\0\1\10\1\0\2\10" +
                  "\1\236\10\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\11\10\1\237\1\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\13\10" +
                  "\16\0\1\10\1\0\11\10\1\0\1\240\20\10\7\0" +
                  "\1\10\1\0\6\10\1\241\4\10\16\0\1\10\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\13\10\16\0" +
                  "\1\10\1\0\2\10\1\242\6\10\1\0\21\10\7\0" +
                  "\1\10\1\0\12\10\1\243\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\7\10\1\244\3\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\10\10\1\245\2\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\12\10\1\246\16\0" +
                  "\1\10\1\0\11\10\1\0\21\10\7\0\1\10\1\0" +
                  "\13\10\16\0\1\10\1\0\1\10\1\247\7\10\1\0" +
                  "\21\10\7\0\1\10\1\0\10\10\1\250\2\10\16\0" +
                  "\1\10\1\0\11\10\1\0\21\10\7\0\1\10\1\0" +
                  "\12\10\1\251\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\6\10\1\252\4\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\4\10" +
                  "\1\253\6\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\4\10\1\254\6\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\13\10" +
                  "\16\0\1\10\1\0\2\10\1\255\6\10\1\0\21\10" +
                  "\7\0\1\10\1\0\1\10\1\256\11\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\13\10" +
                  "\16\0\1\10\1\0\7\10\1\257\1\10\1\0\21\10" +
                  "\7\0\1\10\1\0\4\10\1\260\6\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\7\10" +
                  "\1\261\3\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\4\10\1\262\6\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\13\10" +
                  "\16\0\1\10\1\0\11\10\1\263\7\10\1\264\11\10" +
                  "\7\0\1\10\1\0\13\10\16\0\1\10\1\0\6\10" +
                  "\1\265\2\10\1\0\21\10\7\0\1\10\1\0\13\10" +
                  "\16\0\1\10\1\0\11\10\1\0\3\10\1\266\15\10" +
                  "\7\0\1\10\1\267\13\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\4\10\1\270\6\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\4\10\1\271\6\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\4\10\1\272\6\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\11\10\1\273\1\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\4\10\1\274\6\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\6\10\1\275\4\10\16\0\1\10\1\0\2\10" +
                  "\1\276\6\10\1\0\21\10\7\0\1\10\1\0\13\10" +
                  "\16\0\1\10\1\0\4\10\1\277\4\10\1\0\21\10" +
                  "\7\0\1\10\1\0\13\10\16\0\1\10\1\0\1\300" +
                  "\10\10\1\0\21\10\7\0\1\10\1\0\11\10\1\301" +
                  "\1\10\16\0\1\10\1\0\11\10\1\0\21\10\7\0" +
                  "\1\10\1\0\2\10\1\302\10\10\16\0\1\10\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\13\10\16\0" +
                  "\1\10\1\0\11\10\1\0\12\10\1\303\6\10\7\0" +
                  "\1\10\1\0\13\10\16\0\1\10\1\0\11\10\1\0" +
                  "\16\10\1\304\2\10\7\0\1\10\1\0\13\10\16\0" +
                  "\1\10\1\0\11\10\1\0\1\10\1\305\17\10\7\0" +
                  "\1\10\1\0\13\10\16\0\1\10\1\0\11\10\1\0" +
                  "\14\10\1\306\4\10\7\0\1\10\1\0\13\10\16\0" +
                  "\1\10\1\0\11\10\1\307\21\10\7\0\1\10\1\0" +
                  "\2\10\1\310\10\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\13\10\16\0\1\10\1\0" +
                  "\4\10\1\311\4\10\1\0\21\10\7\0\1\10\1\0" +
                  "\2\10\1\312\10\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\13\10\16\0\1\10\1\0" +
                  "\2\10\1\313\6\10\1\0\21\10\7\0\1\10\1\0" +
                  "\4\10\1\314\6\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\1\10\1\315\11\10\16\0" +
                  "\1\10\1\0\11\10\1\0\21\10\7\0\1\10\1\0" +
                  "\13\10\16\0\1\10\1\0\3\10\1\316\5\10\1\0" +
                  "\21\10\7\0\1\10\1\0\3\10\1\317\7\10\16\0" +
                  "\1\10\1\0\11\10\1\0\21\10\7\0\1\10\1\0" +
                  "\1\10\1\320\11\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\1\10\1\321\11\10\16\0" +
                  "\1\10\1\0\11\10\1\0\21\10\7\0\1\10\1\0" +
                  "\3\10\1\322\7\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\1\10\1\323\11\10\16\0" +
                  "\1\10\1\0\11\10\1\0\21\10\7\0\1\10\1\0" +
                  "\1\10\1\324\11\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\4\10\1\325\6\10\16\0" +
                  "\1\10\1\0\11\10\1\0\21\10\7\0\1\10\1\0" +
                  "\6\10\1\326\4\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\13\10\16\0\1\10\1\0" +
                  "\6\10\1\327\2\10\1\0\21\10\7\0\1\10\1\0" +
                  "\2\10\1\330\10\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\13\10\16\0\1\10\1\0" +
                  "\1\10\1\331\7\10\1\0\21\10\7\0\1\10\1\0" +
                  "\13\10\16\0\1\10\1\0\4\10\1\332\4\10\1\0" +
                  "\21\10\7\0\1\10\1\0\13\10\16\0\1\10\1\0" +
                  "\2\10\1\333\6\10\1\0\21\10\7\0\1\10\1\0" +
                  "\13\10\16\0\1\10\1\0\1\10\1\334\7\10\1\0" +
                  "\21\10\7\0\1\10\1\0\10\10\1\335\2\10\16\0" +
                  "\1\10\1\0\11\10\1\0\21\10\22\0\1\336\63\0" +
                  "\1\10\1\0\3\10\1\337\7\10\16\0\1\10\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\4\10\1\340" +
                  "\6\10\16\0\1\10\1\0\11\10\1\0\21\10\50\0" +
                  "\1\341\35\0\1\10\1\0\13\10\16\0\1\10\1\0" +
                  "\3\10\1\342\5\10\1\0\21\10\7\0\1\10\1\0" +
                  "\2\10\1\343\10\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\2\10\1\344\10\10\16\0" +
                  "\1\10\1\0\11\10\1\0\21\10\7\0\1\10\1\0" +
                  "\1\10\1\345\11\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\2\10\1\346\10\10\16\0" +
                  "\1\10\1\0\11\10\1\0\21\10\7\0\1\10\1\0" +
                  "\3\10\1\347\7\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\11\10\1\350\1\10\16\0" +
                  "\1\10\1\0\11\10\1\0\21\10\7\0\1\10\1\0" +
                  "\13\10\16\0\1\10\1\0\1\10\1\351\7\10\1\0" +
                  "\21\10\7\0\1\10\1\0\13\10\16\0\1\10\1\0" +
                  "\4\10\1\352\4\10\1\0\21\10\7\0\1\10\1\0" +
                  "\4\10\1\353\6\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\13\10\16\0\1\10\1\0" +
                  "\11\10\1\0\13\10\1\354\5\10\7\0\1\10\1\0" +
                  "\13\10\16\0\1\10\1\0\11\10\1\0\15\10\1\355" +
                  "\3\10\7\0\1\10\1\0\13\10\16\0\1\10\1\0" +
                  "\11\10\1\0\15\10\1\356\3\10\50\0\1\357\35\0" +
                  "\1\10\1\0\11\10\1\360\1\10\16\0\1\10\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\11\10\1\361" +
                  "\1\10\16\0\1\10\1\0\11\10\1\0\21\10\7\0" +
                  "\1\10\1\0\13\10\16\0\1\10\1\0\2\10\1\362" +
                  "\6\10\1\0\21\10\7\0\1\10\1\0\2\10\1\363" +
                  "\10\10\16\0\1\10\1\0\11\10\1\0\21\10\7\0" +
                  "\1\10\1\0\4\10\1\364\6\10\16\0\1\10\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\4\10\1\365" +
                  "\6\10\16\0\1\10\1\0\11\10\1\0\21\10\7\0" +
                  "\1\10\1\0\13\10\16\0\1\10\1\0\6\10\1\366" +
                  "\2\10\1\0\21\10\7\0\1\10\1\0\13\10\16\0" +
                  "\1\10\1\0\5\10\1\367\3\10\1\0\21\10\7\0" +
                  "\1\10\1\0\10\10\1\370\2\10\16\0\1\10\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\13\10\16\0" +
                  "\1\10\1\0\2\10\1\371\6\10\1\0\21\10\7\0" +
                  "\1\10\1\0\1\10\1\372\11\10\16\0\1\10\1\0" +
                  "\11\10\1\0\21\10\7\0\1\10\1\0\13\10\16\0" +
                  "\1\10\1\0\11\10\1\373\21\10\7\0\1\10\1\0" +
                  "\1\10\1\374\11\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\1\10\1\375\11\10\16\0" +
                  "\1\10\1\0\11\10\1\0\21\10\7\0\1\10\1\0" +
                  "\11\10\1\376\1\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\13\10\16\0\1\10\1\0" +
                  "\1\10\1\377\7\10\1\0\21\10\7\0\1\10\1\0" +
                  "\1\10\1\u0100\11\10\16\0\1\10\1\0\11\10\1\0" +
                  "\21\10\7\0\1\10\1\0\13\10\16\0\1\10\1\0" +
                  "\1\u0101\10\10\1\0\21\10\14\0\1\u0102\71\0\1\10" +
                  "\1\0\7\10\1\u0103\3\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\1\10\1\u0104\7\10\1\0\21\10\22\0\1\u0105" +
                  "\63\0\1\10\1\0\2\10\1\u0106\10\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\1\10" +
                  "\1\u0107\11\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\7\10\1\u0108\3\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\4\10" +
                  "\1\u0109\6\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\13\10\16\0\1\10\1\0\2\10" +
                  "\1\u010a\6\10\1\0\21\10\7\0\1\10\1\0\10\10" +
                  "\1\u010b\2\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\13\10\16\0\1\10\1\0\11\10" +
                  "\1\0\14\10\1\u010c\4\10\7\0\1\10\1\0\13\10" +
                  "\16\0\1\10\1\0\11\10\1\0\16\10\1\u010d\2\10" +
                  "\7\0\1\10\1\0\13\10\16\0\1\10\1\0\11\10" +
                  "\1\0\16\10\1\u010e\2\10\16\0\1\u010f\67\0\1\10" +
                  "\1\0\10\10\1\u0110\2\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\7\10\1\u0111\3\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\13\10\16\0\1\10\1\0\1\10\1\u0112\7\10" +
                  "\1\0\21\10\7\0\1\10\1\0\4\10\1\u0113\6\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\13\10\16\0\1\10\1\0\2\10\1\u0114\6\10" +
                  "\1\0\21\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\4\10\1\u0115\4\10\1\0\21\10\50\0\1\u0116" +
                  "\35\0\1\10\1\0\10\10\1\u0117\2\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\7\0\1\10\1\0\4\10" +
                  "\1\u0118\6\10\16\0\1\10\1\0\11\10\1\0\21\10" +
                  "\7\0\1\10\1\0\6\10\1\u0119\4\10\16\0\1\10" +
                  "\1\0\11\10\1\0\21\10\20\0\1\u011a\65\0\1\10" +
                  "\1\0\7\10\1\u011b\3\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\1\10\1\u011c\11\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\13\10\16\0\1\10\1\0\2\10\1\u011d\6\10" +
                  "\1\0\21\10\7\0\1\10\1\0\1\10\1\u011e\11\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\6\10\1\u011f\4\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\2\10\1\u0120\6\10\1\0\21\10\7\0\1\10" +
                  "\1\0\13\10\16\0\1\10\1\0\11\10\1\0\1\10" +
                  "\1\u0121\17\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\6\10\1\u0122\2\10\1\0\21\10\7\0\1\10" +
                  "\1\0\1\10\1\u0123\11\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\10\10\1\u0124\2\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\11\10\1\u0125\1\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\11\10\1\u0126\1\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\16\0\1\u0127" +
                  "\67\0\1\10\1\0\13\10\16\0\1\10\1\0\1\10" +
                  "\1\u0128\7\10\1\0\21\10\20\0\1\u0129\65\0\1\10" +
                  "\1\0\13\10\16\0\1\10\1\0\2\10\1\u012a\6\10" +
                  "\1\0\21\10\7\0\1\10\1\0\1\10\1\u012b\11\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\1\10\1\u012c\11\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\1\10\1\u012d\11\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\13\10\16\0\1\10\1\0\11\10\1\0\15\10" +
                  "\1\u012e\3\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\3\10\1\u012f\5\10\1\0\21\10\7\0\1\10" +
                  "\1\0\4\10\1\u0130\6\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\4\10\1\u0131\4\10\1\0\21\10\7\0\1\10" +
                  "\1\0\13\10\16\0\1\10\1\0\6\10\1\u0132\2\10" +
                  "\1\0\21\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\2\10\1\u0133\6\10\1\0\21\10\7\0\1\10" +
                  "\1\0\13\10\16\0\1\10\1\0\2\10\1\u0134\6\10" +
                  "\1\0\21\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\11\10\1\0\16\10\1\u0135\2\10\7\0\1\10" +
                  "\1\0\11\10\1\u0136\1\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\4\10\1\u0137\4\10\1\0\21\10\7\0\1\10" +
                  "\1\0\13\10\16\0\1\10\1\0\4\10\1\u0138\4\10" +
                  "\1\0\21\10\7\0\1\10\1\0\11\10\1\u0139\1\10" +
                  "\16\0\1\10\1\0\11\10\1\0\21\10\7\0\1\10" +
                  "\1\0\11\10\1\u013a\1\10\16\0\1\10\1\0\11\10" +
                  "\1\0\21\10\7\0\1\10\1\0\13\10\16\0\1\10" +
                  "\1\0\11\10\1\u013b\21\10\7\0\1\10\1\0\13\10" +
                  "\16\0\1\10\1\0\11\10\1\u013c\21\10\12\0\1\u013d" +
                  "\134\0\1\u013e\76\0\1\u013f\44\0\1\u0140\60\0";
  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();
  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };
  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\1\0\1\11\20\1\16\11\1\1\1\11\16\1\3\0" +
                  "\1\1\1\11\53\1\1\0\1\11\120\1\1\0\3\1" +
                  "\1\0\17\1\1\0\26\1\1\0\2\1\1\0\15\1" +
                  "\1\0\13\1\1\0\6\1\1\0\2\1\1\11\11\1" +
                  "\1\11\6\1\1\0\3\1\1\0\14\1\1\11\1\1" +
                  "\1\11\21\1\4\0\2\11";
  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
  /**
   * the input device
   */
  private java.io.Reader zzReader;
  /**
   * the current state of the DFA
   */
  private int zzState;
  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;
  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private CharSequence zzBuffer = "";
  /**
   * the textposition at the last accepting state
   */
  private int zzMarkedPos;
  /**
   * the current text position in the buffer
   */
  private int zzCurrentPos;
  /**
   * startRead marks the beginning of the yytext() string in the buffer
   */
  private int zzStartRead;
  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;
  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;
  /**
   * zzAtEOF == true <=> the scanner is at the EOF
   */
  private boolean zzAtEOF;
  /**
   * denotes if the user-EOF-code has already been executed
   */
  private boolean zzEOFDone;

  /* user code: */
  public _CDSLexer() {
    this((java.io.Reader) null);
  }

  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public _CDSLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15392 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 10] << 6) | ((ch >> 4) & 0x3f)] << 4) | (ch & 0xf)];
  }

  private static int[] zzUnpackAction() {
    int[] result = new int[320];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private static int[] zzUnpackRowMap() {
    int[] result = new int[320];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  private static int[] zzUnpackTrans() {
    int[] result = new int[15435];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private static int[] zzUnpackAttribute() {
    int[] result = new int[320];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false}, iff there was new input.
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   * <p>
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead + pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   * <p>
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   * <p>
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   * <p>
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @throws java.io.IOException if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }


      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            return BAD_CHARACTER;
          }
          // fall through
          case 86:
            break;
          case 2: {
            return WHITE_SPACE;
          }
          // fall through
          case 87:
            break;
          case 3: {
            return T_SLASH;
          }
          // fall through
          case 88:
            break;
          case 4: {
            return T_HYPH;
          }
          // fall through
          case 89:
            break;
          case 5: {
            return NUMBERLIT;
          }
          // fall through
          case 90:
            break;
          case 6: {
            return T_DOT;
          }
          // fall through
          case 91:
            break;
          case 7: {
            return ID;
          }
          // fall through
          case 92:
            break;
          case 8: {
            return T_LBRACE;
          }
          // fall through
          case 93:
            break;
          case 9: {
            return T_LPAREN;
          }
          // fall through
          case 94:
            break;
          case 10: {
            return T_LBRACK;
          }
          // fall through
          case 95:
            break;
          case 11: {
            return T_RBRACK;
          }
          // fall through
          case 96:
            break;
          case 12: {
            return T_RPAREN;
          }
          // fall through
          case 97:
            break;
          case 13: {
            return T_RBRACE;
          }
          // fall through
          case 98:
            break;
          case 14: {
            return T_DOLLAR;
          }
          // fall through
          case 99:
            break;
          case 15: {
            return T_AT;
          }
          // fall through
          case 100:
            break;
          case 16: {
            return T_BACKSLASH;
          }
          // fall through
          case 101:
            break;
          case 17: {
            return T_SEMI;
          }
          // fall through
          case 102:
            break;
          case 18: {
            return T_COLON;
          }
          // fall through
          case 103:
            break;
          case 19: {
            return T_COMMA;
          }
          // fall through
          case 104:
            break;
          case 20: {
            return T_QOUTE;
          }
          // fall through
          case 105:
            break;
          case 21: {
            return T_ASSIGN;
          }
          // fall through
          case 106:
            break;
          case 22: {
            return T_UNDER;
          }
          // fall through
          case 107:
            break;
          case 23: {
            return T_MINUS;
          }
          // fall through
          case 108:
            break;
          case 24: {
            return T_RECURSIVE_DESCENT;
          }
          // fall through
          case 109:
            break;
          case 25: {
            return KW_TO;
          }
          // fall through
          case 110:
            break;
          case 26: {
            return KW_AS;
          }
          // fall through
          case 111:
            break;
          case 27: {
            return KW_OR;
          }
          // fall through
          case 112:
            break;
          case 28: {
            return KW_ON;
          }
          // fall through
          case 113:
            break;
          case 29: {
            return LINE_COMMENT;
          }
          // fall through
          case 114:
            break;
          case 30: {
            return STRINGLIT;
          }
          // fall through
          case 115:
            break;
          case 31: {
            return KW_AND;
          }
          // fall through
          case 116:
            break;
          case 32: {
            return KW_NOW;
          }
          // fall through
          case 117:
            break;
          case 33: {
            return KW_KEY;
          }
          // fall through
          case 118:
            break;
          case 34: {
            return BLOCK_COMMENT;
          }
          // fall through
          case 119:
            break;
          case 35: {
            return B_TRUE;
          }
          // fall through
          case 120:
            break;
          case 36: {
            return KW_TYPE;
          }
          // fall through
          case 121:
            break;
          case 37: {
            return KW_USER;
          }
          // fall through
          case 122:
            break;
          case 38: {
            return KW_ENUM;
          }
          // fall through
          case 123:
            break;
          case 39: {
            return KW_FROM;
          }
          // fall through
          case 124:
            break;
          case 40: {
            return KW_LEFT;
          }
          // fall through
          case 125:
            break;
          case 41: {
            return KW_NULL;
          }
          // fall through
          case 126:
            break;
          case 42: {
            return KW_MANY;
          }
          // fall through
          case 127:
            break;
          case 43: {
            return KW_JOIN;
          }
          // fall through
          case 128:
            break;
          case 44: {
            return READ;
          }
          // fall through
          case 129:
            break;
          case 45: {
            return KW_RANGE;
          }
          // fall through
          case 130:
            break;
          case 46: {
            return KW_RIGHT;
          }
          // fall through
          case 131:
            break;
          case 47: {
            return KW_USING;
          }
          // fall through
          case 132:
            break;
          case 48: {
            return B_FALSE;
          }
          // fall through
          case 133:
            break;
          case 49: {
            return KW_INNER;
          }
          // fall through
          case 134:
            break;
          case 50: {
            return KW_GRANT;
          }
          // fall through
          case 135:
            break;
          case 51: {
            return KW_OUTER;
          }
          // fall through
          case 136:
            break;
          case 52: {
            return KW_WHERE;
          }
          // fall through
          case 137:
            break;
          case 53: {
            return KW_UNIQUE;
          }
          // fall through
          case 138:
            break;
          case 54: {
            return UPDATE;
          }
          // fall through
          case 139:
            break;
          case 55: {
            return KW_ENTITY;
          }
          // fall through
          case 140:
            break;
          case 56: {
            return KW_EXISTS;
          }
          // fall through
          case 141:
            break;
          case 57: {
            return KW_FORMAT;
          }
          // fall through
          case 142:
            break;
          case 58: {
            return KW_ASSERT;
          }
          // fall through
          case 143:
            break;
          case 59: {
            return KW_ASPECT;
          }
          // fall through
          case 144:
            break;
          case 60: {
            return KW_ACTION;
          }
          // fall through
          case 145:
            break;
          case 61: {
            return KW_SELECT;
          }
          // fall through
          case 146:
            break;
          case 62: {
            return KW_CDS_ON;
          }
          // fall through
          case 147:
            break;
          case 63: {
            return KW_INSERT;
          }
          // fall through
          case 148:
            break;
          case 64: {
            return KW_DEFINE;
          }
          // fall through
          case 149:
            break;
          case 65: {
            return DELETE;
          }
          // fall through
          case 150:
            break;
          case 66: {
            return R_DATE;
          }
          // fall through
          case 151:
            break;
          case 67: {
            return KW_TYPE_OF;
          }
          // fall through
          case 152:
            break;
          case 68: {
            return KW_RETURNS;
          }
          // fall through
          case 153:
            break;
          case 69: {
            return KW_ACTIONS;
          }
          // fall through
          case 154:
            break;
          case 70: {
            return KW_SERVICE;
          }
          // fall through
          case 155:
            break;
          case 71: {
            return KW_NOTNULL;
          }
          // fall through
          case 156:
            break;
          case 72: {
            return KW_DEFAULT;
          }
          // fall through
          case 157:
            break;
          case 73: {
            return KW_READ_ONLY;
          }
          // fall through
          case 158:
            break;
          case 74: {
            return KW_RESTRICT;
          }
          // fall through
          case 159:
            break;
          case 75: {
            return KW_REQUIRES;
          }
          // fall through
          case 160:
            break;
          case 76: {
            return KW_FUNCTION;
          }
          // fall through
          case 161:
            break;
          case 77: {
            return KW_ARRAY;
          }
          // fall through
          case 162:
            break;
          case 78: {
            return KW_REQUIRED;
          }
          // fall through
          case 163:
            break;
          case 79: {
            return KW_EXCLUDING;
          }
          // fall through
          case 164:
            break;
          case 80: {
            return KW_NAMESPACE;
          }
          // fall through
          case 165:
            break;
          case 81: {
            return KW_INTEGRITY;
          }
          // fall through
          case 166:
            break;
          case 82: {
            return KW_UPDATE;
          }
          // fall through
          case 167:
            break;
          case 83: {
            return KW_PROJECTION;
          }
          // fall through
          case 168:
            break;
          case 84: {
            return KW_ASSOCIATION_TO;
          }
          // fall through
          case 169:
            break;
          case 85: {
            return KW_COMPOSITION_OF;
          }
          // fall through
          case 170:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
