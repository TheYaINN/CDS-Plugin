/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.joachimsohn.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static de.joachimsohn.language.psi.CDSTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>CDSLexer.flex</tt>
 */
public class CDSLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\1\22\0\1\1\15\0\1\3\1\0\12\2\7\0\1\46\1\4\1\22\1\47\1\25\1\32\5\4"+
    "\1\31\1\24\1\26\1\23\1\51\1\4\1\30\1\4\1\27\1\50\5\4\6\0\1\6\1\4\1\13\1\41"+
    "\1\10\1\17\1\16\1\44\1\15\1\42\1\35\1\36\1\7\1\5\1\21\1\12\1\45\1\20\1\11"+
    "\1\33\1\14\1\37\1\43\1\40\1\34\1\4\12\0\1\1\32\0\1\1\337\0\1\1\177\0\13\1"+
    "\35\0\2\1\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\26\4\1\3\4\4\1\5"+
    "\12\4\1\6\4\4\1\7\1\10\3\4\1\11\11\4"+
    "\1\12\1\13\5\4\1\14\25\4\1\15\5\4\1\16"+
    "\2\4\1\17\1\20\1\4\1\21\5\4\1\22\4\4"+
    "\1\23\5\4\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\15\4\1\32\1\33\6\4\1\34\3\4\1\35\1\36"+
    "\1\37\1\4\1\40\1\4\1\41\1\4\1\42\6\4"+
    "\1\43\1\44\1\4\1\45\1\4\1\46\4\4\1\47"+
    "\1\4\1\50\3\4\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\4\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516"+
    "\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666"+
    "\0\u0690\0\u06ba\0\250\0\u06e4\0\u070e\0\u0738\0\u0762\0\250"+
    "\0\250\0\u078c\0\u07b6\0\u07e0\0\250\0\u080a\0\u0834\0\u085e"+
    "\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\250\0\250"+
    "\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\250\0\u0a56\0\u0a80"+
    "\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0"+
    "\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20"+
    "\0\u0d4a\0\u0d74\0\u0d9e\0\250\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46"+
    "\0\u0e70\0\250\0\u0e9a\0\u0ec4\0\250\0\250\0\u0eee\0\250"+
    "\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\250\0\u0fea\0\u1014"+
    "\0\u103e\0\u1068\0\250\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\u1164\0\u118e"+
    "\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de"+
    "\0\u1308\0\u1332\0\u135c\0\250\0\250\0\u1386\0\u13b0\0\u13da"+
    "\0\u1404\0\u142e\0\u1458\0\250\0\u1482\0\u14ac\0\u14d6\0\250"+
    "\0\u1500\0\250\0\u152a\0\250\0\u1554\0\250\0\u157e\0\250"+
    "\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u167a\0\250\0\250"+
    "\0\u16a4\0\250\0\u16ce\0\250\0\u16f8\0\u1722\0\u174c\0\u1776"+
    "\0\250\0\u17a0\0\250\0\u17ca\0\u17f4\0\u181e\0\250\0\250"+
    "\0\250\0\250\0\250\0\250\0\u1848\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\5\5\1\24\2\5\1\25\1\5"+
    "\1\26\4\5\1\27\1\30\3\5\1\31\1\32\1\5"+
    "\53\0\1\3\52\0\1\4\1\33\52\0\46\5\4\0"+
    "\2\5\1\34\5\5\1\35\4\5\1\36\30\5\4\0"+
    "\1\5\1\37\3\5\1\40\1\5\1\41\36\5\4\0"+
    "\2\5\1\42\43\5\4\0\1\5\1\43\30\5\1\44"+
    "\1\5\1\45\11\5\4\0\4\5\1\46\41\5\4\0"+
    "\14\5\1\47\31\5\4\0\2\5\1\50\43\5\4\0"+
    "\1\5\1\51\3\5\1\52\40\5\4\0\5\5\1\53"+
    "\40\5\4\0\14\5\1\54\31\5\4\0\10\5\1\55"+
    "\3\5\1\56\31\5\4\0\4\5\1\57\41\5\4\0"+
    "\1\5\1\60\12\5\1\61\31\5\4\0\17\5\1\62"+
    "\4\5\1\63\21\5\4\0\21\5\1\64\24\5\4\0"+
    "\15\5\1\65\12\5\1\66\7\5\1\67\5\5\4\0"+
    "\4\5\1\70\41\5\4\0\15\5\1\71\30\5\4\0"+
    "\40\5\1\72\5\5\4\0\21\5\1\73\24\5\4\0"+
    "\45\5\1\74\2\0\1\33\53\0\3\5\1\75\42\5"+
    "\4\0\32\5\1\76\13\5\4\0\27\5\1\77\16\5"+
    "\4\0\35\5\1\100\10\5\4\0\5\5\1\101\40\5"+
    "\4\0\27\5\1\102\16\5\4\0\1\5\1\103\44\5"+
    "\4\0\10\5\1\104\16\5\1\105\5\5\1\106\10\5"+
    "\4\0\5\5\1\107\40\5\4\0\7\5\1\110\1\5"+
    "\1\111\34\5\4\0\14\5\1\112\15\5\1\113\13\5"+
    "\4\0\15\5\1\114\30\5\4\0\5\5\1\115\40\5"+
    "\4\0\11\5\1\116\34\5\4\0\11\5\1\117\34\5"+
    "\4\0\2\5\1\120\43\5\4\0\1\5\1\121\44\5"+
    "\4\0\15\5\1\122\30\5\4\0\2\5\1\123\2\5"+
    "\1\124\21\5\1\125\11\5\1\126\4\5\4\0\20\5"+
    "\1\127\25\5\4\0\25\5\1\130\20\5\4\0\42\5"+
    "\1\131\3\5\4\0\6\5\1\132\37\5\4\0\4\5"+
    "\1\133\41\5\4\0\30\5\1\134\15\5\4\0\11\5"+
    "\1\135\34\5\4\0\4\5\1\136\41\5\4\0\25\5"+
    "\1\137\20\5\4\0\43\5\1\140\2\5\4\0\4\5"+
    "\1\141\41\5\4\0\32\5\1\142\13\5\4\0\4\5"+
    "\1\143\41\5\4\0\11\5\1\144\34\5\4\0\30\5"+
    "\1\145\15\5\4\0\3\5\1\146\42\5\4\0\11\5"+
    "\1\147\34\5\4\0\4\5\1\150\41\5\4\0\32\5"+
    "\1\151\13\5\4\0\5\5\1\152\40\5\4\0\33\5"+
    "\1\153\12\5\4\0\4\5\1\154\41\5\4\0\36\5"+
    "\1\155\7\5\4\0\4\5\1\156\41\5\4\0\41\5"+
    "\1\157\4\5\4\0\1\5\1\160\44\5\4\0\1\5"+
    "\1\161\44\5\4\0\7\5\1\162\36\5\4\0\3\5"+
    "\1\163\42\5\4\0\35\5\1\164\10\5\4\0\27\5"+
    "\1\165\16\5\4\0\10\5\1\166\35\5\4\0\10\5"+
    "\1\167\35\5\4\0\20\5\1\170\25\5\4\0\26\5"+
    "\1\171\17\5\4\0\43\5\1\172\2\5\4\0\4\5"+
    "\1\173\41\5\4\0\1\5\1\174\44\5\4\0\1\5"+
    "\1\175\44\5\4\0\1\5\1\176\12\5\1\177\31\5"+
    "\4\0\21\5\1\200\24\5\4\0\42\5\1\201\3\5"+
    "\4\0\5\5\1\202\40\5\4\0\14\5\1\203\31\5"+
    "\4\0\15\5\1\204\30\5\4\0\27\5\1\205\16\5"+
    "\4\0\10\5\1\206\35\5\4\0\27\5\1\207\16\5"+
    "\4\0\11\5\1\210\34\5\4\0\7\5\1\211\36\5"+
    "\4\0\4\5\1\212\41\5\4\0\10\5\1\213\35\5"+
    "\4\0\12\5\1\214\33\5\4\0\27\5\1\215\16\5"+
    "\4\0\27\5\1\216\16\5\4\0\15\5\1\217\30\5"+
    "\4\0\14\5\1\220\31\5\4\0\14\5\1\221\31\5"+
    "\4\0\11\5\1\222\34\5\4\0\21\5\1\223\24\5"+
    "\4\0\4\5\1\224\41\5\4\0\23\5\1\225\22\5"+
    "\4\0\23\5\1\226\22\5\4\0\6\5\1\227\37\5"+
    "\4\0\27\5\1\230\16\5\4\0\1\5\1\231\44\5"+
    "\4\0\30\5\1\232\15\5\4\0\35\5\1\233\10\5"+
    "\4\0\5\5\1\234\40\5\4\0\7\5\1\235\36\5"+
    "\4\0\27\5\1\236\16\5\4\0\7\5\1\237\36\5"+
    "\4\0\4\5\1\240\41\5\4\0\11\5\1\241\34\5"+
    "\4\0\1\5\1\242\44\5\4\0\11\5\1\243\34\5"+
    "\4\0\1\5\1\244\44\5\4\0\14\5\1\245\31\5"+
    "\4\0\22\5\1\246\23\5\4\0\21\5\1\247\24\5"+
    "\4\0\21\5\1\250\24\5\4\0\2\5\1\251\43\5"+
    "\4\0\5\5\1\252\40\5\4\0\11\5\1\253\34\5"+
    "\4\0\4\5\1\254\41\5\4\0\27\5\1\255\16\5"+
    "\4\0\15\5\1\256\30\5\4\0\32\5\1\257\13\5"+
    "\4\0\7\5\1\260\36\5\4\0\5\5\1\261\40\5"+
    "\4\0\4\5\1\262\41\5\4\0\23\5\1\263\22\5"+
    "\4\0\7\5\1\264\36\5\4\0\1\5\1\265\44\5"+
    "\4\0\11\5\1\266\34\5\4\0\1\5\1\267\44\5"+
    "\4\0\30\5\1\270\15\5\4\0\27\5\1\271\16\5"+
    "\4\0\5\5\1\272\40\5\4\0\4\5\1\273\41\5"+
    "\4\0\12\5\1\274\33\5\4\0\15\5\1\275\30\5"+
    "\4\0\1\5\1\276\44\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6258];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\274\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CDSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 48: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 49: break;
          case 3: 
            { return NUMBER;
            } 
            // fall through
          case 50: break;
          case 4: 
            { return STRING;
            } 
            // fall through
          case 51: break;
          case 5: 
            { return AS;
            } 
            // fall through
          case 52: break;
          case 6: 
            { return IS;
            } 
            // fall through
          case 53: break;
          case 7: 
            { return ON;
            } 
            // fall through
          case 54: break;
          case 8: 
            { return OR;
            } 
            // fall through
          case 55: break;
          case 9: 
            { return TO;
            } 
            // fall through
          case 56: break;
          case 10: 
            { return NOT;
            } 
            // fall through
          case 57: break;
          case 11: 
            { return AND;
            } 
            // fall through
          case 58: break;
          case 12: 
            { return END;
            } 
            // fall through
          case 59: break;
          case 13: 
            { return KEY;
            } 
            // fall through
          case 60: break;
          case 14: 
            { return NULL;
            } 
            // fall through
          case 61: break;
          case 15: 
            { return MANY;
            } 
            // fall through
          case 62: break;
          case 16: 
            { return ENUM;
            } 
            // fall through
          case 63: break;
          case 17: 
            { return ELSE;
            } 
            // fall through
          case 64: break;
          case 18: 
            { return CASE;
            } 
            // fall through
          case 65: break;
          case 19: 
            { return FROM;
            } 
            // fall through
          case 66: break;
          case 20: 
            { return CRLF;
            } 
            // fall through
          case 67: break;
          case 21: 
            { return READ;
            } 
            // fall through
          case 68: break;
          case 22: 
            { return TYPE;
            } 
            // fall through
          case 69: break;
          case 23: 
            { return THEN;
            } 
            // fall through
          case 70: break;
          case 24: 
            { return JOIN;
            } 
            // fall through
          case 71: break;
          case 25: 
            { return WHEN;
            } 
            // fall through
          case 72: break;
          case 26: 
            { return USING;
            } 
            // fall through
          case 73: break;
          case 27: 
            { return GRANT;
            } 
            // fall through
          case 74: break;
          case 28: 
            { return WHERE;
            } 
            // fall through
          case 75: break;
          case 29: 
            { return ASSERT;
            } 
            // fall through
          case 76: break;
          case 30: 
            { return ACTION;
            } 
            // fall through
          case 77: break;
          case 31: 
            { return ENTITY;
            } 
            // fall through
          case 78: break;
          case 32: 
            { return EXISTS;
            } 
            // fall through
          case 79: break;
          case 33: 
            { return SELECT;
            } 
            // fall through
          case 80: break;
          case 34: 
            { return UNIQUE;
            } 
            // fall through
          case 81: break;
          case 35: 
            { return DELETE;
            } 
            // fall through
          case 82: break;
          case 36: 
            { return UPDATE;
            } 
            // fall through
          case 83: break;
          case 37: 
            { return ACTIONS;
            } 
            // fall through
          case 84: break;
          case 38: 
            { return SERVICE;
            } 
            // fall through
          case 85: break;
          case 39: 
            { return RETURNS;
            } 
            // fall through
          case 86: break;
          case 40: 
            { return COMMENT;
            } 
            // fall through
          case 87: break;
          case 41: 
            { return FUNCTION;
            } 
            // fall through
          case 88: break;
          case 42: 
            { return READONLY;
            } 
            // fall through
          case 89: break;
          case 43: 
            { return RESTRICT;
            } 
            // fall through
          case 90: break;
          case 44: 
            { return REQUIRES;
            } 
            // fall through
          case 91: break;
          case 45: 
            { return NAMESPACE;
            } 
            // fall through
          case 92: break;
          case 46: 
            { return EXCLUDING;
            } 
            // fall through
          case 93: break;
          case 47: 
            { return PROJECTION;
            } 
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
